// Generated by CoffeeScript 2.3.2
var Bf;

Bf = function(io) {
  var cmd, idx, mrk, ptr, reg;
  // init some variables
  reg = [0]; //# registers; first initialized, auto growing
  ptr = 0; //# register pointer
  mrk = 0; //# loop index marker
  idx = 0;
  cmd = {
    '>': function() {
      var name;
      return reg[name = ++ptr] != null ? reg[name] : reg[name] = 0; // move to the next register
    },
    '<': function() {
      if (--ptr < 0) { // move to the previous register
        return ptr = 0;
      }
    },
    '+': function() {
      return reg[ptr]++;
    },
    '-': function() {
      return reg[ptr]--;
    },
    '.': function() {
      return io != null ? typeof io.write === "function" ? io.write(reg[ptr]) : void 0 : void 0;
    },
    ',': function() {
      return reg[ptr] = (io != null ? typeof io.read === "function" ? io.read() : void 0 : void 0) || 0; // read char code into the current register
    },
    '[': function() {
      return mrk = idx; // start loop
    },
    ']': function() {
      if (reg[ptr]) {
        return idx = mrk;
      }
    }
  };
  return {
    
    // parser loop. reads the code char by char
    // and executes mapped command if available.
    // skips all unknown characters (aka code beautyfications)
    // ends after the last character was parsed/executed.
    run: function(code) {
      var name;
      idx = 0;
      while (idx < code.length) {
        if (typeof cmd[name = code.charAt(idx++)] === "function") {
          cmd[name]();
        }
      }
    },
    reset: function() {
      return reg = [ptr = mrk = 0];
    }
  };
};

if (typeof module === 'object') {
  module.exports = Bf;
}
